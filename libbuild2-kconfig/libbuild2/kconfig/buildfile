intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import impl_libs += build2%lib{build2} # Implied interface dependency.

import? flex  = flex%exe{flex}
import? bison = bison%exe{bison}

define y: file
y{*}: extension = y

define l: file
l{*}: extension = l

getopt = ($c.target.class == 'windows' && $c.target.system != 'mingw32')

lib{build2-kconfig}: {hxx ixx txx cxx}{**} $impl_libs $intf_libs

lib{build2-kconfig}: {h c}{* -parser.tab... -lexer.lex... -menu -conf} \
                     {h c}{parser.tab...} c{lexer.lex...}
lib{build2-kconfig}: c{menu}: include = adhoc # Included by parser.y.
lib{build2-kconfig}: c{conf}: include = adhoc # Included by confapi.c.
lib{build2-kconfig}: getopt/h{getopt}: include = $getopt

if ($flex != [null] && $bison != [null])
{
  # Note: the kernel's makefile (Makefile.host) always passes -t (instrument
  # the parser for tracing) and -l/-L (don't generate #line directives). It's
  # not clear whether/why we would want the same. To start let's keep them
  # (we've confirmed -t doesn't seem to have any effect on performance).
  #
  #
  <{h c}{parser.tab...}>: y{parser} $bison
  {{
    diag bison ($<[0])
    $bison "--defines=$path($>[0])" "--output=$path($>[1])" -t -l $path($<[0])
  }}

  c{lexer.lex...}: l{lexer} h{parser.tab...} $flex
  {{
    diag flex ($<[0])
    $flex -o $path($>) -L -f $path($<[0])
  }}

  {h c}{parser.tab...} c{lexer.lex...}:
  {
    # Include the generated files into the distribution and don't remove them
    # when cleaning in src (so that clean results in a state identical to
    # distributed).
    #
    dist  = true
    clean = ($src_root != $out_root)

    # Backlink in the source directory for convenience of development.
    #
    backlink = true
  }
}

# Build options.
#
cc.poptions =+ "-I$out_root" "-I$src_root" "-I$src_base"

if $getopt
  c.poptions =+ "-I($src_base/getopt)"

# Disable autoconfig support.
#
cc.poptions += -DKCONFIG_AUTOCONFIG=NULL -DKCONFIG_REGEX=0

obja{*}: cc.poptions += -DLIBBUILD2_KCONFIG_STATIC_BUILD
objs{*}: cc.poptions += -DLIBBUILD2_KCONFIG_SHARED_BUILD

# Disable warnings in Kconfig code.
#
switch $c.class
{
  case 'gcc'
  {
    c.coptions += -Wno-extra -Wno-error

    if ($c.target.class == 'windows')
      c.coptions += -Wno-deprecated-declarations
  }

  case 'msvc'
    c.coptions += /w
}

# Export options.
#
lib{build2-kconfig}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{build2-kconfig}: cxx.export.poptions += -DLIBBUILD2_KCONFIG_STATIC
libs{build2-kconfig}: cxx.export.poptions += -DLIBBUILD2_KCONFIG_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{build2-kconfig}: bin.lib.version = @"-$version.project_id"
else
  lib{build2-kconfig}: bin.lib.version = @"-$version.major.$version.minor"

# Embed the build system core version as our load suffix.
#
libs{build2-kconfig}: bin.lib.load_suffix = "-$build.version.interface"

# Install into the libbuild2/kconfig/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
# And don't install kconfig C headers (implementation details).
#
h{*}: install = false

{hxx ixx txx}{*}:
{
  install         = include/libbuild2/kconfig/
  install.subdirs = true
}
